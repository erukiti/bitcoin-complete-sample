#! /usr/bin/env node

const {BitcoinPeer} = require('../src/chap-p2p/bitcoin-peer')
const {encodeVersion} = require('../src/chap-p2p/packet/version')
const {conf, logger} = require('../src/index')

const peer = new BitcoinPeer()

const blocks = {}
const txs = {}

peer.onCommand('version', payload => {
  logger.debug(payload)
  // payload.startHeight
})

peer.onCommand('sendcmpct', payload => {
  logger.debug('  sendcmpct', payload)
})

peer.onCommand('feefilter', payload => {
  logger.info('  feefilter', payload)
})

peer.onCommand('inv', payload => {
  // FIXME filtering
  peer.send('getdata', payload)

  payload.forEach(({type, hash}) => {
  })
})

peer.onCommand('ping', payload => {
  peer.send('pong', payload)
})

const onTx = tx => {
  if (tx.id in txs) {
    logger.debug(`warn: Tx ${tx.id} is already exists.`)
  } else {
    txs[tx.id] = tx
    console.log('  Tx', tx)
  }
}

const onBlock = block => {
  if (block.id in blocks) {
    logger.debug(`warn: Block ${block.id} is already exists.`)
  } else {
    blocks[block.id] = block
    block.getTransactions().forEach(tx => onTx(tx))
    console.log('  Block', block)
  }
}

peer.onCommand('block', payload => {
  onBlock(payload)
})

const body = async () => {
  await peer.connect()
  peer.send('version', {})
  peer.send('verack')

  peer.send('getblocks', {
    ids: [conf.genesisBlock],
    stopHash: Buffer.alloc(32).fill(0)
  })
}

body()

